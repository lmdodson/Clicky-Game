{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/GameCard/GameCard.js","components/GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","GameCard","props","key","id","onClick","handleClick","clicked","name","src","image","alt","GameBoard","state","cards","message","score","highScore","cardOrder","forEach","card","index","setState","sort","Math","random","newScore","newHighScore","this","map","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0002a525.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = () => (\r\n<div className=\"jumbotron\">\r\n    <h1 className=\"display-4 title\">Clicky Game</h1>\r\n    <hr className=\"my-4\" />\r\n    <p>Click on an image to earn points, but don't click on any image more than once!</p>\r\n</div>\r\n    );\r\n\r\nexport default Jumbotron;","\r\nimport React from 'react';\r\nimport \"./GameCard.css\";\r\n\r\nconst GameCard = props => (\r\n\t<div className=\"cards col-xs-6 col-sm-6 col-md-4 col-lg-3 col-xl-3\" \r\n\t  key={props.id}\r\n    onClick={() => \r\n      props.handleClick(props.id, props.clicked)}>\r\n    <img \r\n      id={props.name}\r\n\t\t  src={props.image}\r\n\t\t  alt={props.name}\r\n\t\t/>\r\n\t</div>\r\n);\r\n\r\nexport default GameCard;","import React, { Component } from 'react';\r\nimport GameCard from '../GameCard';\r\nimport cards from \"../../cards.json\";\r\nimport \"./GameBoard.css\";\r\n\r\nclass GameBoard extends Component {\r\n    state = {\r\n        cards,\r\n        message: \"Click a card to begin\",\r\n        score: 0,\r\n        highScore: 0\r\n    };\r\n\r\n    // when a card is clicked on\r\n    handleClick = (id, clicked) => {\r\n        const cardOrder = this.state.cards;\r\n\r\n        // if the card has already been clicked\r\n        if (clicked) {\r\n            cardOrder.forEach((card, index) => {\r\n                cardOrder[index].clicked = false;\r\n            });\r\n            return this.setState ({\r\n                card: cardOrder.sort(() => Math.random - 0.5),\r\n                message: \"You guessed incorrectly!\",\r\n                score: 0\r\n            })\r\n        }\r\n        else {\r\n            cardOrder.forEach((card, index) => {\r\n                if(id === card.id) {\r\n                    cardOrder[index].clicked = true\r\n                }\r\n            });\r\n\r\n            var { highScore, score } = this.state;\r\n            var newScore = score + 1;\r\n            var newHighScore = newScore > highScore ? newScore : highScore;\r\n\r\n            return this.setState({\r\n                card: cardOrder.sort(() => Math.random() - 0.5),\r\n                message: \"You guessed correctly\",\r\n                score: newScore,\r\n                highScore: newHighScore\r\n            })\r\n        }\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            // game stats\r\n            <div className=\"container-fluid game-board\">\r\n                <div className=\"game-stats\">\r\n                    <div className=\"game-scores\">\r\n                        <p>\r\n                            Current Score: {this.state.score} | High Score: {this.state.highScore}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"game-message\">\r\n                        <p> {this.state.message} </p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            <div className=\"row\"> \r\n                {this.state.cards.map (card => (\r\n                    <GameCard\r\n                        key={card.id}\r\n                        id={card.id}\r\n                        name={card.name}\r\n                        clicked={card.clicked}\r\n                        image={card.image}\r\n                        handleClick={this.handleClick}\r\n                        />\r\n                ))}\r\n            </div>\r\n            </div>\r\n\r\n        );\r\n    };\r\n};\r\n\r\nexport default GameBoard;","import React from 'react';\nimport Jumbotron from './components/Jumbotron';\nimport GameBoard from './components/GameBoard';\nimport './App.css';\n\nconst App = () => (\n  <div className=\"container-fluid\">\n    <Jumbotron />\n    <GameBoard />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}